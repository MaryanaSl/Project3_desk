
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

// {{ Слукина М.Н.: При изменении поля Согласованная сидка пользователю должен задаваться вопрос 
	//о необходимости пересчёта табличной части. Если таблица пустая, вопрос задаваться не должен 
	// если ответ Нет - то возможность пересчета табличной части с помощью программно доабвленной команды/кнопки ПересчитатьТаблицу
#Область ОбработчикиСобытийЭлементовГруппыСкидка

&НаКлиенте  
Асинх Процедура Доработка_СогласованнаяСкидкаПриИзменении(Элемент)
	
	//{{ Слукина М.Н.: При изменении поля Согласованная сидка пользователю должен задаваться вопрос 
	//о необходимости пересчёта табличной части. Если таблица пустая, вопрос задаваться не должен 
	//Поле ввода добавлено программно в общем модуле Доработка_РаботаСФормами, там же установлено действие ПриИзменении
	Если Объект.Товары.Количество() > 0 Или Объект.Услуги.Количество()> 0 Тогда 
		
		ТекстВопроса = "Изменён процент скидки. Пересчитать таблицы товаров и услуг?";
		ОтветПользователя = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Возврат;  
		Иначе  
			ПересчитатьТаблицу();
		КонецЕсли; 
	Иначе
		Возврат;  
	КонецЕсли;  
	// }}
КонецПроцедуры


&НаКлиенте
Процедура КомандаПересчитатьТаблицу(Команда) 
	//{{ Слукина М.Н. обработчик программно добавленной в общем модуле 
	//Доработка_РаботаСФормами команды/кнопки ПересчитатьТаблицу

	ПересчитатьТаблицу();
    // }}
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТаблицу()
	//{{ Слукина М.Н. обход табличных частей и вызов процедуры пересчета Суммы строки. 
	Для Каждого Строка Из Объект.Товары Цикл
		РассчитатьСуммуСтроки(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Услуги Цикл
		РассчитатьСуммуСтроки(Строка);
	КонецЦикла;
    // }}
КонецПроцедуры  

#КонецОбласти
// }}

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	// {{ Слукина М.Н.: пересчитать сумму в каждой строке с учетом установленной скидки 
	//Но в случае если суммарная скидка превышает 100%, Сумма по строке должна быть установлена 0, пользователь должен получить сообщение
	
	//КоэффициентСкидки = 1 - ТекущиеДанные.Скидка / 100;
	КоэффициентСкидки = 1 - (ТекущиеДанные.Скидка + Объект.Доработка_СогласованнаяСкидка)/100;
	
	//ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки;
	Если  КоэффициентСкидки >= 0 И КоэффициентСкидки <= 1 Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки; 
	Иначе  
		ТекущиеДанные.Сумма = 0; 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сумма общей скидки превышает 100%";
		Сообщение.Поле = "Объект.Доработка_СогласованнаяСкидка";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;

	// }}
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
